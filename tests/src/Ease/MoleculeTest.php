<?php

declare(strict_types=1);

/**
 * This file is part of the EaseCore package.
 *
 * (c) Vítězslav Dvořák <info@vitexsoftware.cz>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease;

use Ease\Molecule;
/**
 * @codingStandardsIgnoreFile
 *
 * @codeCoverageIgnoreStart
 */
use PHPUnit\Framework\Attributes\CoversClass;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-09-22 at 07:47:58.
 */
#[CoversClass(Molecule::class)]
class MoleculeTest extends AtomTest
{
    protected $object;

    protected function setUp(): void
    {
        $this->object = new Local\MoleculeTester();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * t This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \Ease\Molecule::setObjectName
     */
    public function testSetObjectName(): void
    {
        $this->object->setObjectName('Testing');
        $this->assertEquals('Testing', $this->object->getObjectName());
        $this->object->setObjectName();
        $this->assertEquals(
            \get_class($this->object),
            $this->object->getObjectName(),
        );
    }

    /**
     * @covers \Ease\Molecule::getObjectName
     */
    public function testGetObjectName(): void
    {
        $this->assertNotEmpty($this->object->getObjectName());
    }

    /**
     * @covers \Ease\Molecule::setupProperty
     */
    public function testSetupProperty(): void
    {
        if (!\defined('OBJNAME')) {
            \define('OBJNAME', 'CONSTANT');
        }

        $this->object->setupProperty(['objectName' => 'Original'], 'string', 'OBJNAME');
        $this->assertEquals('CONSTANT', $this->object->string);

        $this->object->setupProperty(['OBJNAME' => 'Copy'], 'string', 'OBJNAME');
        $this->assertEquals('Copy', $this->object->string);

        $this->object->string = '';
        $this->object->setupProperty(['key' => 'value'], 'string', 'OBJNAME');
        $this->assertEquals('CONSTANT', $this->object->string);

        $this->object->setupProperty(['string' => 'ARRAY'], 'string', 'OBJNAME');
        $this->assertEquals('ARRAY', $this->object->string);

        putenv('ENVTEST=TEST');

        $this->object->setupProperty([], 'string', 'ENVTEST');
        $this->assertEquals('TEST', $this->object->string);
    }

    /**
     * @covers \Ease\Molecule::setupIntProperty
     */
    public function testsetupIntProperty(): void
    {
        if (!\defined('CONST_INT')) {
            \define('CONST_INT', '256');
        }

        $this->object->setupIntProperty(['integer' => '123'], 'integer');
        $this->assertEquals(123, $this->object->integer);

        $this->object->setupIntProperty(['INT' => '456'], 'integer', 'CONST_INT');
        $this->assertEquals(256, $this->object->integer);

        $this->object->integer = 0;
        $this->object->setupIntProperty([], 'integer', 'CONST_INT');
        $this->assertEquals(256, $this->object->integer);

        putenv('ENV_INT=789');
        $this->object->setupIntProperty([], 'integer', 'ENV_INT');
        $this->assertEquals(789, $this->object->integer);
    }

    /**
     * @covers \Ease\Molecule::setupFloatProperty
     */
    public function testsetupFloatProperty(): void
    {
        if (!\defined('CONST_FLOAT')) {
            \define('CONST_FLOAT', '4.56');
        }

        $this->object->setupFloatProperty(['float' => '1.23'], 'float');
        $this->assertEquals(1.23, $this->object->float);

        $this->object->setupFloatProperty(['CONST_FLOAT' => '4.56'], 'float', 'CONST_FLOAT');
        $this->assertEquals(4.56, $this->object->float);

        $this->object->float = 0.0;
        $this->object->setupFloatProperty([], 'float', 'CONST_FLOAT');
        $this->assertEquals(4.56, $this->object->float);

        putenv('ENV_FLOAT=7.89');
        $this->object->setupFloatProperty([], 'float', 'ENV_FLOAT');
        $this->assertEquals(7.89, $this->object->float);

        $this->object->float = 0.0;
        $this->object->setupFloatProperty([], 'float', '', 9.87);
        $this->assertEquals(9.87, $this->object->float);
    }

    /**
     * @covers \Ease\Molecule::setupBoolProperty
     */
    public function testsetupBoolProperty(): void
    {
        $this->object->setupBoolProperty(['boolean' => 'true'], 'boolean');
        $this->assertTrue($this->object->boolean);

        $this->object->setupBoolProperty(['CONST_BOOL' => 'false'], 'boolean', 'CONST_BOOL');
        $this->assertFalse($this->object->boolean);

        $this->object->boolean = false;
        $this->object->setupBoolProperty([], 'boolean', 'CONST_BOOL');
        $this->assertFalse($this->object->boolean);

        putenv('ENV_BOOL=true');
        $this->object->setupBoolProperty([], 'boolean', 'ENV_BOOL');
        $this->assertTrue($this->object->boolean);
    }
}

// @codeCoverageIgnoreEnd
