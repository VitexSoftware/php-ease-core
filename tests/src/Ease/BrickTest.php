<?php

declare(strict_types=1);

/**
 * This file is part of the EaseCore package.
 *
 * (c) Vítězslav Dvořák <info@vitexsoftware.cz>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease;

use Ease\Brick;
use PHPUnit\Framework\Attributes\CoversClass;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:23:11.
 */
#[CoversClass(Brick::class)]
class BrickTest extends SandTest
{
    protected Brick $brick;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        parent::setUp();
        $this->brick = new Local\BrickTester();
        $this->brick = new Brick();
        $this->brick->setupProperty(['nameColumn' => 'name'], 'nameColumn');
        $this->brick->setKeyColumn('id');
        $this->brick->nameColumn = 'name';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Test Constructor.
     *
     * @covers \Ease\Brick::__construct
     */
    public function testConstructor(): void
    {
        $classname = \get_class($this->brick);

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct(null, ['debug' => true]);
        $mock->__construct(1, ['autoload' => true, 'myTable' => 'test']);
        $this->assertNull($mock->getMyKey());
    }

    /**
     * @covers \Ease\Brick::setObjectName
     */
    public function testSetObjectName(): void
    {
        //        parent::testSetObjectName();
        $this->brick->setMyKey(123);
        $this->brick->setObjectName();
        $this->assertEquals(
            '123@'.\get_class($this->brick),
            $this->brick->getObjectName(),
        );
        $this->brick->setObjectName('customBrick');
        $this->assertEquals('customBrick', $this->brick->getObjectName());
    }

    /**
     * @covers \Ease\Brick::useIdentifier
     */
    public function testuseIdentifier(): void
    {
        $this->brick->useIdentifier(null);
        $this->brick->useIdentifier($this->brick);
        $this->assertEquals(
            $this->brick->getMyKey(),
            $this->brick->useIdentifier(123),
        );
        $this->brick->useIdentifier(['key' => 'value']);
        $this->assertEquals(
            ['key' => 'value', 'id' => 123],
            $this->brick->getData(),
        );
        $this->brick->dataReset();
        $this->brick->useIdentifier('name');
        $this->brick->setDataValue('name', 'name');
        $this->assertEquals(['name' => 'name'], $this->brick->getData());
    }

    /**
     * @covers \Ease\Brick::howToProcess
     */
    public function testhowToProcess(): void
    {
        $this->assertEquals('id', $this->brick->howToProcess(123));
        $this->assertEquals(
            'values',
            $this->brick->howToProcess(['key' => 'value']),
        );
        $this->assertEquals('reuse', $this->brick->howToProcess($this->brick));
        $this->assertEquals('unknown', $this->brick->howToProcess(false));
        $this->brick->nameColumn = 'name';
        $this->assertEquals('name', $this->brick->howToProcess('name'));
        $this->assertEquals('unknown', $this->brick->howToProcess(null));
    }
}
